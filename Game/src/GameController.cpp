#include "GameController.h"

#include <cassert>
#include <sstream>

#include "MoveUtil.h"


void GameController::start(State state) {

    whitePlayer.start(&std::cout, &std::cerr);
    blackPlayer.start(&std::cout, &std::cerr);

    Piece lastMovedWhitePiece;
    Move lastWhiteMove;

    Piece lastMovedBlackPiece;
    Move lastBlackMove;

    bool running = true;
    while(running) {

        IPlayerController& currentPlayer = state.isWhitesTurn() ? whitePlayer : blackPlayer;

        MoveUtil::GenerationList availableMoves;
        MoveUtil::getAllMoves(state, availableMoves);

        if( clearScreen ) {
            std::system("cls");
        }

        std::cout << '\n' << state.toPrettyString("\t", lastWhiteMove, lastBlackMove) << '\n';

        std::cout << '\n';
		std::cout << "FEN: " << state.toFEN() << '\n';
		std::cout << "Player: " << ( state.isWhitesTurn() ? "White" : "Black") << "\n";
		std::cout << "Turn: " << (state.turn+1) << std::endl;

        std::cout << "\nLast moves:" << std::endl;
        if( state.turn == 0 ) {
            std::cout << "  No one has moved..." << std::endl;;
        }
        else {
            if( state.turn > 0 ) {
                std::cout << "  White: " << lastMovedWhitePiece.getAlgebraicChar() << "  " << lastWhiteMove << std::endl;;
            }
            if( state.turn > 1 ) {
                std::cout << "  Black: " << lastMovedBlackPiece.getAlgebraicChar() << "  " << lastBlackMove << std::endl;;
            }
        }       

        if( availableMoves.size() == 0 ) {
            std::cout << "\nCHECKMATE! " << ( state.isWhitesTurn() ? "Black" : "White") << " won!" << std::endl;
            
            std::cout << "\nPress any key to exit" << std::endl;
            std::string input;
		    getline(std::cin, input);
            break;
        }

        if( printValidMoves ) {
            std::cout << "\nValid moves:\n";
            for( size_t i = 0; i < availableMoves.size(); i++ ) {
                std::cout << "  " << availableMoves[i] << std::endl;
            }
        }

        std::cout << "\nWaiting for " << ( state.isWhitesTurn() ? "White" : "Black") << " to make a move..." << std::endl;
        
        Move lastMove =  state.isWhitesTurn() ?  lastBlackMove : lastWhiteMove;
        Move move = currentPlayer.getMove(state, availableMoves, lastBlackMove);

        //Move move = currentPlayer.getMove(state, availableMoves);
        assert(availableMoves.contains(move) && "Move generated by PlayerController is not valid");

        if( state.isWhitesTurn() ) {
            lastWhiteMove = move;
            lastMovedWhitePiece = state[move.fromField];
        }
        else {
            lastBlackMove = move;
            lastMovedBlackPiece = state[move.fromField];
        }
        
        // Execute move
        state = MoveUtil::executeMove(state, move);
    }   

}